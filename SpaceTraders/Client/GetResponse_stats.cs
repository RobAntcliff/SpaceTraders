// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client {
    public class GetResponse_stats : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Number of registered agents in the game.</summary>
        public int? Agents { get; set; }
        /// <summary>Total number of ships in the game.</summary>
        public int? Ships { get; set; }
        /// <summary>Total number of systems in the game.</summary>
        public int? Systems { get; set; }
        /// <summary>Total number of waypoints in the game.</summary>
        public int? Waypoints { get; set; }
        /// <summary>
        /// Instantiates a new GetResponse_stats and sets the default values.
        /// </summary>
        public GetResponse_stats() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GetResponse_stats CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GetResponse_stats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"agents", n => { Agents = n.GetIntValue(); } },
                {"ships", n => { Ships = n.GetIntValue(); } },
                {"systems", n => { Systems = n.GetIntValue(); } },
                {"waypoints", n => { Waypoints = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("agents", Agents);
            writer.WriteIntValue("ships", Ships);
            writer.WriteIntValue("systems", Systems);
            writer.WriteIntValue("waypoints", Waypoints);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
