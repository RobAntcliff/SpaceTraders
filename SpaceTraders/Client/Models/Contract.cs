// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client.Models {
    /// <summary>
    /// Contract details.
    /// </summary>
    public class Contract : IAdditionalDataHolder, IParsable {
        /// <summary>Whether the contract has been accepted by the agent</summary>
        public bool? Accepted { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The time at which the contract is no longer available to be accepted</summary>
        public DateTimeOffset? DeadlineToAccept { get; set; }
        /// <summary>Deprecated in favor of deadlineToAccept</summary>
        [Obsolete("")]
        public DateTimeOffset? Expiration { get; set; }
        /// <summary>The symbol of the faction that this contract is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FactionSymbol { get; set; }
#nullable restore
#else
        public string FactionSymbol { get; set; }
#endif
        /// <summary>Whether the contract has been fulfilled</summary>
        public bool? Fulfilled { get; set; }
        /// <summary>ID of the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The terms to fulfill the contract.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ContractTerms? Terms { get; set; }
#nullable restore
#else
        public ContractTerms Terms { get; set; }
#endif
        /// <summary>Type of contract.</summary>
        public Contract_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new Contract and sets the default values.
        /// </summary>
        public Contract() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Contract CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Contract();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accepted", n => { Accepted = n.GetBoolValue(); } },
                {"deadlineToAccept", n => { DeadlineToAccept = n.GetDateTimeOffsetValue(); } },
                {"expiration", n => { Expiration = n.GetDateTimeOffsetValue(); } },
                {"factionSymbol", n => { FactionSymbol = n.GetStringValue(); } },
                {"fulfilled", n => { Fulfilled = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"terms", n => { Terms = n.GetObjectValue<ContractTerms>(ContractTerms.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<Contract_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("accepted", Accepted);
            writer.WriteDateTimeOffsetValue("deadlineToAccept", DeadlineToAccept);
            writer.WriteDateTimeOffsetValue("expiration", Expiration);
            writer.WriteStringValue("factionSymbol", FactionSymbol);
            writer.WriteBoolValue("fulfilled", Fulfilled);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<ContractTerms>("terms", Terms);
            writer.WriteEnumValue<Contract_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
