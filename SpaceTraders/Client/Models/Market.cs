// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client.Models {
    public class Market : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of goods that are bought and sold between agents at this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TradeGood>? Exchange { get; set; }
#nullable restore
#else
        public List<TradeGood> Exchange { get; set; }
#endif
        /// <summary>The list of goods that are exported from this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TradeGood>? Exports { get; set; }
#nullable restore
#else
        public List<TradeGood> Exports { get; set; }
#endif
        /// <summary>The list of goods that are sought as imports in this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TradeGood>? Imports { get; set; }
#nullable restore
#else
        public List<TradeGood> Imports { get; set; }
#endif
        /// <summary>The symbol of the market. The symbol is the same as the waypoint where the market is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>The list of goods that are traded at this market. Visible only when a ship is present at the market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MarketTradeGood>? TradeGoods { get; set; }
#nullable restore
#else
        public List<MarketTradeGood> TradeGoods { get; set; }
#endif
        /// <summary>The list of recent transactions at this market. Visible only when a ship is present at the market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<MarketTransaction>? Transactions { get; set; }
#nullable restore
#else
        public List<MarketTransaction> Transactions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Market and sets the default values.
        /// </summary>
        public Market() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Market CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Market();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"exchange", n => { Exchange = n.GetCollectionOfObjectValues<TradeGood>(TradeGood.CreateFromDiscriminatorValue)?.ToList(); } },
                {"exports", n => { Exports = n.GetCollectionOfObjectValues<TradeGood>(TradeGood.CreateFromDiscriminatorValue)?.ToList(); } },
                {"imports", n => { Imports = n.GetCollectionOfObjectValues<TradeGood>(TradeGood.CreateFromDiscriminatorValue)?.ToList(); } },
                {"symbol", n => { Symbol = n.GetStringValue(); } },
                {"tradeGoods", n => { TradeGoods = n.GetCollectionOfObjectValues<MarketTradeGood>(MarketTradeGood.CreateFromDiscriminatorValue)?.ToList(); } },
                {"transactions", n => { Transactions = n.GetCollectionOfObjectValues<MarketTransaction>(MarketTransaction.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<TradeGood>("exchange", Exchange);
            writer.WriteCollectionOfObjectValues<TradeGood>("exports", Exports);
            writer.WriteCollectionOfObjectValues<TradeGood>("imports", Imports);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteCollectionOfObjectValues<MarketTradeGood>("tradeGoods", TradeGoods);
            writer.WriteCollectionOfObjectValues<MarketTransaction>("transactions", Transactions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
