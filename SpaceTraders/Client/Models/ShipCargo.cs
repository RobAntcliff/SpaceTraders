// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client.Models {
    /// <summary>
    /// Ship cargo details.
    /// </summary>
    public class ShipCargo : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The max number of items that can be stored in the cargo hold.</summary>
        public int? Capacity { get; set; }
        /// <summary>The items currently in the cargo hold.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ShipCargoItem>? Inventory { get; set; }
#nullable restore
#else
        public List<ShipCargoItem> Inventory { get; set; }
#endif
        /// <summary>The number of items currently stored in the cargo hold.</summary>
        public int? Units { get; set; }
        /// <summary>
        /// Instantiates a new ShipCargo and sets the default values.
        /// </summary>
        public ShipCargo() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ShipCargo CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ShipCargo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"capacity", n => { Capacity = n.GetIntValue(); } },
                {"inventory", n => { Inventory = n.GetCollectionOfObjectValues<ShipCargoItem>(ShipCargoItem.CreateFromDiscriminatorValue)?.ToList(); } },
                {"units", n => { Units = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteCollectionOfObjectValues<ShipCargoItem>("inventory", Inventory);
            writer.WriteIntValue("units", Units);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
