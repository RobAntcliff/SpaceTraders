// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client.Models {
    /// <summary>
    /// The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
    /// </summary>
    public class ShipFrame : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.</summary>
        public int? Condition { get; set; }
        /// <summary>Description of the frame.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be refueled to this amount.</summary>
        public int? FuelCapacity { get; set; }
        /// <summary>The amount of slots that can be dedicated to modules installed in the ship. Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.</summary>
        public int? ModuleSlots { get; set; }
        /// <summary>The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount takes up a number of points, and once there are no more points remaining, no new mounts can be installed.</summary>
        public int? MountingPoints { get; set; }
        /// <summary>Name of the frame.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The requirements for installation on a ship</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ShipRequirements? Requirements { get; set; }
#nullable restore
#else
        public ShipRequirements Requirements { get; set; }
#endif
        /// <summary>Symbol of the frame.</summary>
        public ShipFrame_symbol? Symbol { get; set; }
        /// <summary>
        /// Instantiates a new ShipFrame and sets the default values.
        /// </summary>
        public ShipFrame() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ShipFrame CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ShipFrame();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"condition", n => { Condition = n.GetIntValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"fuelCapacity", n => { FuelCapacity = n.GetIntValue(); } },
                {"moduleSlots", n => { ModuleSlots = n.GetIntValue(); } },
                {"mountingPoints", n => { MountingPoints = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"requirements", n => { Requirements = n.GetObjectValue<ShipRequirements>(ShipRequirements.CreateFromDiscriminatorValue); } },
                {"symbol", n => { Symbol = n.GetEnumValue<ShipFrame_symbol>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("condition", Condition);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("fuelCapacity", FuelCapacity);
            writer.WriteIntValue("moduleSlots", ModuleSlots);
            writer.WriteIntValue("mountingPoints", MountingPoints);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<ShipRequirements>("requirements", Requirements);
            writer.WriteEnumValue<ShipFrame_symbol>("symbol", Symbol);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
