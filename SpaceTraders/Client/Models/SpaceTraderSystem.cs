// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace SpaceTraders.Client.Models {
    public class SpaceTraderSystem : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Factions that control this system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SystemFaction>? Factions { get; set; }
#nullable restore
#else
        public List<SystemFaction> Factions { get; set; }
#endif
        /// <summary>The symbol of the sector.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SectorSymbol { get; set; }
#nullable restore
#else
        public string SectorSymbol { get; set; }
#endif
        /// <summary>The symbol of the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>The type of system.</summary>
        public SystemType? Type { get; set; }
        /// <summary>Waypoints in this system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SystemWaypoint>? Waypoints { get; set; }
#nullable restore
#else
        public List<SystemWaypoint> Waypoints { get; set; }
#endif
        /// <summary>Relative position of the system in the sector in the x axis.</summary>
        public int? X { get; set; }
        /// <summary>Relative position of the system in the sector in the y axis.</summary>
        public int? Y { get; set; }
        /// <summary>
        /// Instantiates a new SpaceTraderSystem and sets the default values.
        /// </summary>
        public SpaceTraderSystem() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SpaceTraderSystem CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SpaceTraderSystem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"factions", n => { Factions = n.GetCollectionOfObjectValues<SystemFaction>(SystemFaction.CreateFromDiscriminatorValue)?.ToList(); } },
                {"sectorSymbol", n => { SectorSymbol = n.GetStringValue(); } },
                {"symbol", n => { Symbol = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<SystemType>(); } },
                {"waypoints", n => { Waypoints = n.GetCollectionOfObjectValues<SystemWaypoint>(SystemWaypoint.CreateFromDiscriminatorValue)?.ToList(); } },
                {"x", n => { X = n.GetIntValue(); } },
                {"y", n => { Y = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<SystemFaction>("factions", Factions);
            writer.WriteStringValue("sectorSymbol", SectorSymbol);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteEnumValue<SystemType>("type", Type);
            writer.WriteCollectionOfObjectValues<SystemWaypoint>("waypoints", Waypoints);
            writer.WriteIntValue("x", X);
            writer.WriteIntValue("y", Y);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
