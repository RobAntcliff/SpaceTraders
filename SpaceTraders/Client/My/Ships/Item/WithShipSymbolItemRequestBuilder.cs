// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SpaceTraders.Client.My.Ships.Item.Cargo;
using SpaceTraders.Client.My.Ships.Item.Chart;
using SpaceTraders.Client.My.Ships.Item.Cooldown;
using SpaceTraders.Client.My.Ships.Item.Dock;
using SpaceTraders.Client.My.Ships.Item.Extract;
using SpaceTraders.Client.My.Ships.Item.Jettison;
using SpaceTraders.Client.My.Ships.Item.Jump;
using SpaceTraders.Client.My.Ships.Item.Mounts;
using SpaceTraders.Client.My.Ships.Item.Nav;
using SpaceTraders.Client.My.Ships.Item.Navigate;
using SpaceTraders.Client.My.Ships.Item.Negotiate;
using SpaceTraders.Client.My.Ships.Item.Orbit;
using SpaceTraders.Client.My.Ships.Item.Purchase;
using SpaceTraders.Client.My.Ships.Item.Refine;
using SpaceTraders.Client.My.Ships.Item.Refuel;
using SpaceTraders.Client.My.Ships.Item.Scan;
using SpaceTraders.Client.My.Ships.Item.Sell;
using SpaceTraders.Client.My.Ships.Item.Siphon;
using SpaceTraders.Client.My.Ships.Item.Survey;
using SpaceTraders.Client.My.Ships.Item.Transfer;
using SpaceTraders.Client.My.Ships.Item.Warp;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SpaceTraders.Client.My.Ships.Item {
    /// <summary>
    /// Builds and executes requests for operations under \my\ships\{shipSymbol}
    /// </summary>
    public class WithShipSymbolItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The cargo property</summary>
        public CargoRequestBuilder Cargo { get =>
            new CargoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The chart property</summary>
        public ChartRequestBuilder Chart { get =>
            new ChartRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cooldown property</summary>
        public CooldownRequestBuilder Cooldown { get =>
            new CooldownRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The dock property</summary>
        public DockRequestBuilder Dock { get =>
            new DockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The extract property</summary>
        public ExtractRequestBuilder Extract { get =>
            new ExtractRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jettison property</summary>
        public JettisonRequestBuilder Jettison { get =>
            new JettisonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jump property</summary>
        public JumpRequestBuilder Jump { get =>
            new JumpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mounts property</summary>
        public MountsRequestBuilder Mounts { get =>
            new MountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The nav property</summary>
        public NavRequestBuilder Nav { get =>
            new NavRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The navigate property</summary>
        public NavigateRequestBuilder Navigate { get =>
            new NavigateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The negotiate property</summary>
        public NegotiateRequestBuilder Negotiate { get =>
            new NegotiateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The orbit property</summary>
        public OrbitRequestBuilder Orbit { get =>
            new OrbitRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purchase property</summary>
        public PurchaseRequestBuilder Purchase { get =>
            new PurchaseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The refine property</summary>
        public RefineRequestBuilder Refine { get =>
            new RefineRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The refuel property</summary>
        public RefuelRequestBuilder Refuel { get =>
            new RefuelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The scan property</summary>
        public ScanRequestBuilder Scan { get =>
            new ScanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sell property</summary>
        public SellRequestBuilder Sell { get =>
            new SellRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The siphon property</summary>
        public SiphonRequestBuilder Siphon { get =>
            new SiphonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The survey property</summary>
        public SurveyRequestBuilder Survey { get =>
            new SurveyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transfer property</summary>
        public TransferRequestBuilder Transfer { get =>
            new TransferRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The warp property</summary>
        public WarpRequestBuilder Warp { get =>
            new WarpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithShipSymbolItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithShipSymbolItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/my/ships/{shipSymbol}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithShipSymbolItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithShipSymbolItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/my/ships/{shipSymbol}", rawUrl) {
        }
        /// <summary>
        /// Retrieve the details of a ship under your agent&apos;s ownership.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WithShipSymbolGetResponse?> GetAsWithShipSymbolGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WithShipSymbolGetResponse> GetAsWithShipSymbolGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WithShipSymbolGetResponse>(requestInfo, WithShipSymbolGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the details of a ship under your agent&apos;s ownership.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithShipSymbolGetResponse instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WithShipSymbolResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WithShipSymbolResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WithShipSymbolResponse>(requestInfo, WithShipSymbolResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve the details of a ship under your agent&apos;s ownership.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithShipSymbolItemRequestBuilder WithUrl(string rawUrl) {
            return new WithShipSymbolItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WithShipSymbolItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters> {
        }
    }
}
