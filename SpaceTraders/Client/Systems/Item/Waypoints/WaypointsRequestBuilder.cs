// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using SpaceTraders.Client.Models;
using SpaceTraders.Client.Systems.Item.Waypoints.Item;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace SpaceTraders.Client.Systems.Item.Waypoints {
    /// <summary>
    /// Builds and executes requests for operations under \systems\{systemSymbol}\waypoints
    /// </summary>
    public class WaypointsRequestBuilder : BaseRequestBuilder {
        /// <summary>Gets an item from the SpaceTraders.Client.systems.item.waypoints.item collection</summary>
        /// <param name="position">The waypoint symbol</param>
        public WithWaypointSymbolItemRequestBuilder this[string position] { get {
            var urlTplParams = new Dictionary<string, object>(PathParameters);
            urlTplParams.Add("waypointSymbol", position);
            return new WithWaypointSymbolItemRequestBuilder(urlTplParams, RequestAdapter);
        } }
        /// <summary>
        /// Instantiates a new WaypointsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WaypointsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/systems/{systemSymbol}/waypoints{?limit*,page*,traits*,type*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WaypointsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WaypointsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/systems/{systemSymbol}/waypoints{?limit*,page*,traits*,type*}", rawUrl) {
        }
        /// <summary>
        /// Return a paginated list of all of the waypoints for a given system.If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WaypointsGetResponse?> GetAsWaypointsGetResponseAsync(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WaypointsGetResponse> GetAsWaypointsGetResponseAsync(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WaypointsGetResponse>(requestInfo, WaypointsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return a paginated list of all of the waypoints for a given system.If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWaypointsGetResponse instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WaypointsResponse?> GetAsync(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WaypointsResponse> GetAsync(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WaypointsResponse>(requestInfo, WaypointsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Return a paginated list of all of the waypoints for a given system.If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<WaypointsRequestBuilderGetQueryParameters>> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WaypointsRequestBuilder WithUrl(string rawUrl) {
            return new WaypointsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Return a paginated list of all of the waypoints for a given system.If a waypoint is uncharted, it will return the `Uncharted` trait instead of its actual traits.
        /// </summary>
        public class WaypointsRequestBuilderGetQueryParameters {
            /// <summary>How many entries to return per page</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>What entry offset to request</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Filter waypoints by one or more traits.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("traits")]
            public string? Traits { get; set; }
#nullable restore
#else
            [QueryParameter("traits")]
            public string Traits { get; set; }
#endif
            /// <summary>Filter waypoints by type.</summary>
            [Obsolete("This property is deprecated, use typeAsWaypointType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("type")]
            public string? Type { get; set; }
#nullable restore
#else
            [QueryParameter("type")]
            public string Type { get; set; }
#endif
            /// <summary>Filter waypoints by type.</summary>
            [QueryParameter("type")]
            public WaypointType? TypeAsWaypointType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class WaypointsRequestBuilderGetRequestConfiguration : RequestConfiguration<WaypointsRequestBuilderGetQueryParameters> {
        }
    }
}
